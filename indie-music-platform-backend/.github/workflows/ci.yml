name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ==================== Backend Testing ====================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-html pytest-xdist

    - name: Set up test environment
      run: |
        # テスト用環境変数を設定
        echo "TESTING=True" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key_for_ci" >> $GITHUB_ENV
        echo "FIREBASE_CREDENTIALS_PATH=tests/mocks/firebase_credentials.json" >> $GITHUB_ENV
        echo "FIREBASE_API_KEY=test_api_key" >> $GITHUB_ENV
        echo "S3_BUCKET_NAME=test-bucket" >> $GITHUB_ENV
        echo "S3_REGION=ap-northeast-1" >> $GITHUB_ENV
        echo "STRIPE_API_KEY=sk_test_dummy" >> $GITHUB_ENV
        echo "STRIPE_WEBHOOK_SECRET=whsec_test_dummy" >> $GITHUB_ENV

    - name: Create test database
      run: |
        python -c "
        import os
        os.environ['TESTING'] = 'True'
        from app.db.session import engine
        from app.models.base import Base
        Base.metadata.create_all(bind=engine)
        print('✅ Test database tables created')
        "

    - name: Run unit and integration tests
      run: |
        pytest tests/api/ tests/services/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --html=reports/unit-tests.html \
          --self-contained-html \
          -v \
          --tb=short

    - name: Run security tests
      run: |
        pytest tests/security/ \
          --html=reports/security-tests.html \
          --self-contained-html \
          -v \
          --tb=short
      continue-on-error: true  # セキュリティテストは一部失敗してもCIを止めない

    - name: Run boundary value tests
      run: |
        pytest tests/edge_cases/ \
          --html=reports/boundary-tests.html \
          --self-contained-html \
          -v \
          --tb=short \
          --maxfail=5  # 境界値テストは5個失敗したら停止
      continue-on-error: true

    - name: Run validation tests
      run: |
        pytest tests/validation/ \
          --html=reports/validation-tests.html \
          --self-contained-html \
          -v \
          --tb=short
      continue-on-error: true

    - name: Run comprehensive API tests
      run: |
        pytest tests/comprehensive/ \
          --html=reports/comprehensive-tests.html \
          --self-contained-html \
          -v \
          --tb=short \
          --maxfail=10
      continue-on-error: true

    - name: Generate test summary
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Categories:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Unit/Integration Tests**: Core functionality" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 **Security Tests**: OWASP Top 10 coverage" >> $GITHUB_STEP_SUMMARY
        echo "- ⚡ **Boundary Tests**: Edge cases and limits" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 **Validation Tests**: Input validation" >> $GITHUB_STEP_SUMMARY
        echo "- 🌐 **Comprehensive Tests**: Full API coverage" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage:" >> $GITHUB_STEP_SUMMARY
        echo "Coverage reports available in artifacts." >> $GITHUB_STEP_SUMMARY

    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ github.run_number }}
        path: |
          reports/
          htmlcov/
          coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # ==================== Code Quality Checks ====================
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety

    - name: Code formatting check (Black)
      run: |
        black --check --diff app/ tests/
      continue-on-error: true

    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff app/ tests/
      continue-on-error: true

    - name: Code linting (flake8)
      run: |
        flake8 app/ tests/ --max-line-length=100 --extend-ignore=E203,W503
      continue-on-error: true

    - name: Type checking (mypy)
      run: |
        pip install types-python-dateutil types-requests
        mypy app/ --ignore-missing-imports
      continue-on-error: true

    - name: Security scan (bandit)
      run: |
        bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Dependency security check (safety)
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-reports-${{ github.run_number }}
        path: |
          bandit-report.json
          safety-report.json

  # ==================== Database Migration Tests ====================
  migration-test:
    name: Database Migration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: migration_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test database migrations
      run: |
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/migration_test_db"
        export TESTING=True
        
        # Run migrations
        alembic upgrade head
        
        # Verify tables were created
        python -c "
        import os
        from sqlalchemy import create_engine, inspect
        
        engine = create_engine(os.environ['DATABASE_URL'])
        inspector = inspect(engine)
        tables = inspector.get_table_names()
        
        expected_tables = ['user', 'track', 'purchase', 'play_history']
        
        for table in expected_tables:
            if table in tables:
                print(f'✅ Table {table} exists')
            else:
                print(f'❌ Table {table} missing')
                exit(1)
        
        print('✅ All expected tables found')
        "

    - name: Test migration rollback
      run: |
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/migration_test_db"
        
        # Test rollback (if there are multiple migrations)
        alembic downgrade -1 || echo "No previous migration to rollback to"
        alembic upgrade head

  # ==================== Security Scanning ====================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ==================== Performance Tests ====================
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: perf_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Set up performance test environment
      run: |
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/perf_test_db"
        export TESTING=True
        
        # Create tables and seed data
        python seed_data.py

    - name: Run load tests
      run: |
        # Create a simple locust file for basic load testing
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        
        class MusicPlatformUser(HttpUser):
            wait_time = between(1, 3)
            
            @task(3)
            def list_tracks(self):
                self.client.get("/api/v1/tracks/?limit=10")
            
            @task(2)
            def search_tracks(self):
                self.client.get("/api/v1/tracks/?search=test")
            
            @task(1)
            def get_track_detail(self):
                # This will likely return 404, but tests the endpoint
                self.client.get("/api/v1/tracks/test-id")
        EOF
        
        # Start the FastAPI server in background
        uvicorn app.main:app --host 127.0.0.1 --port 8000 &
        sleep 5
        
        # Run load test for 30 seconds
        locust -f locustfile.py --host=http://127.0.0.1:8000 \
               --users 10 --spawn-rate 2 --run-time 30s --headless \
               --html performance-report.html

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-report-${{ github.run_number }}
        path: performance-report.html

  # ==================== Build and Package ====================
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [backend-test, code-quality]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: indie-music-platform-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm indie-music-platform-backend:${{ github.sha }} python -c "
        import app.main
        print('✅ Docker image builds and imports successfully')
        "

  # ==================== Notification ====================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-test, code-quality, migration-test, build]
    if: always()
    
    steps:
    - name: Create summary
      run: |
        echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Job Status:" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Tests: ${{ needs.backend-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Migration Tests: ${{ needs.migration-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- Test reports and coverage available in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Security scan results in Security tab" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY