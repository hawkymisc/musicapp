name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger
  push:
    branches: [ main ]
    paths:
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'Dockerfile'

jobs:
  # ==================== Comprehensive Security Testing ====================
  comprehensive-security:
    name: Comprehensive Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety semgrep

    - name: Set up test environment
      run: |
        echo "TESTING=True" >> $GITHUB_ENV
        echo "DATABASE_URL=sqlite:///test.db" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key_for_security_scan" >> $GITHUB_ENV
        echo "FIREBASE_CREDENTIALS_PATH=tests/mocks/firebase_credentials.json" >> $GITHUB_ENV

    - name: Run OWASP security tests
      run: |
        pytest tests/security/test_security_vulnerabilities.py \
          --html=security-test-report.html \
          --self-contained-html \
          -v \
          --tb=short
      continue-on-error: true

    - name: Run static security analysis (Bandit)
      run: |
        bandit -r app/ -f json -o bandit-report.json -ll
        bandit -r app/ -f txt -o bandit-report.txt -ll
      continue-on-error: true

    - name: Check for known security vulnerabilities (Safety)
      run: |
        safety check --json --output safety-report.json --continue-on-error
        safety check --output safety-report.txt --continue-on-error
      continue-on-error: true

    - name: Run Semgrep security rules
      run: |
        semgrep --config=auto app/ --json --output semgrep-report.json
        semgrep --config=auto app/ --output semgrep-report.txt
      continue-on-error: true

    - name: Generate security summary
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Scans Performed:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **OWASP Top 10 Tests**: Application-level security testing" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Static Analysis (Bandit)**: Python code security issues" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Dependency Scan (Safety)**: Known vulnerability database" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Pattern Analysis (Semgrep)**: Security anti-patterns" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Report Files:" >> $GITHUB_STEP_SUMMARY
        echo "- Security test HTML report" >> $GITHUB_STEP_SUMMARY
        echo "- Bandit static analysis report" >> $GITHUB_STEP_SUMMARY
        echo "- Safety dependency vulnerability report" >> $GITHUB_STEP_SUMMARY
        echo "- Semgrep pattern analysis report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Scan Date**: $(date)" >> $GITHUB_STEP_SUMMARY

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          security-test-report.html
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt
          semgrep-report.json
          semgrep-report.txt

  # ==================== Container Security Scan ====================
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image for scanning
      run: |
        docker build -t security-scan-image .

    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'security-scan-image'
        format: 'sarif'
        output: 'trivy-container-results.sarif'

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          trivy-container-results.sarif
          trivy-fs-results.sarif

  # ==================== License and Compliance Check ====================
  license-compliance:
    name: License and Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install license checking tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses licensecheck

    - name: Check Python package licenses
      run: |
        pip install -r requirements.txt
        pip-licenses --format json --output-file python-licenses.json
        pip-licenses --format plain --output-file python-licenses.txt
        
        # Check for problematic licenses
        pip-licenses --fail-on "GPL" --fail-on "AGPL" || echo "Warning: GPL/AGPL licenses detected"

    - name: Generate compliance report
      run: |
        echo "## 📋 License Compliance Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### License Summary:" >> $GITHUB_STEP_SUMMARY
        echo "Python package licenses checked and reported." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Compliance Status:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **License scanning**: Completed" >> $GITHUB_STEP_SUMMARY
        echo "- ⚠️ **GPL/AGPL check**: Review required if warnings present" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Scan Date**: $(date)" >> $GITHUB_STEP_SUMMARY

    - name: Upload license reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: license-reports-${{ github.run_number }}
        path: |
          python-licenses.json
          python-licenses.txt