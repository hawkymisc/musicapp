[tool.poetry]
name = "indie-music-platform-backend"
version = "0.1.0"
description = ""
authors = ["musicophilia <hawkymisc@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "0.95.1"
uvicorn = "0.22.0"
sqlalchemy = "2.0.15"
psycopg2-binary = "2.9.6"
alembic = "1.11.1"
pydantic = "1.10.8"
email-validator = "2.0.0"
python-multipart = "0.0.6"
python-dotenv = "1.0.0"
boto3 = "1.26.151"
firebase-admin = "6.1.0"
stripe = "5.4.0"
python-jose = "3.3.0"
passlib = "1.7.4"
tenacity = "8.2.2"
gunicorn = "20.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
httpx = "0.24.1"
pytest-cov = "^4.1.0"
pytest-html = "^4.1.1"
pytest-xdist = "^3.3.1"
pytest-benchmark = "^4.0.0"
pytest-mock = "^3.12.0"
black = "^23.9.1"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.6.1"
bandit = "^1.7.5"
safety = "^2.3.4"
radon = "^6.0.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ==================== Test Coverage Configuration ====================
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "app/main.py",  # Entry point - harder to test
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
title = "Indie Music Platform Backend Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"
pretty_print = true

# ==================== Code Quality Configuration ====================
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["app"]
known_third_party = ["fastapi", "sqlalchemy", "pydantic"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "firebase_admin.*",
    "stripe.*",
    "boto3.*",
    "sqlalchemy.*",
    "alembic.*",
]
ignore_missing_imports = true

# ==================== Pytest Configuration ====================
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=70",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security tests",
    "boundary: marks tests as boundary/edge case tests",
    "performance: marks tests as performance tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestDeprecationWarning",
    "ignore::UserWarning:pydantic._internal._config",
]
asyncio_mode = "auto"
